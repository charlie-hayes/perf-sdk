syntax = "proto3";

package protocol;
option csharp_namespace = "Couchbase.Grpc.Protocol";
option java_package = "com.couchbase.client.performer.grpc";
option java_multiple_files = true;
option go_package = "github.com/couchbaselabs/perf-sdk/protocol";

enum ImplementationCaps {
  // Empty enum not allowed
  IMPLEMENTATION_DUMMY = 0;
}

enum PerformerCaps {
  // The performer supports GRPC workloads.  It's optional, but allows various GRPC streaming approaches to be tested
  // with the performer, which can help find one that reliably lets results be streamed back.
  GRPC_TESTING = 0;

  // Level 1 KV support: the initial KV commands (get, insert, replace, remove, upsert) together with options.
  KV_SUPPORT_1 = 1;
}

message PerformerCapsFetchRequest {
}

message PerformerCapsFetchResponse {
  // The capabilities of the implementation-under-test.
  repeated ImplementationCaps implementationCaps = 1;

  // The capabilities of this performer.
  repeated PerformerCaps performerCaps = 2;

  // Human-readable string identifying the performer.  For example, "java".
  string performerUserAgent = 3;

  // The number of APIs this implementation supports.  This is primarily used to run tests on multiple APIs, so if an implementation
  // only supports one, it should just return one.
  // What an API is, is open to interpretation to the performer.  The driver will simply call some tests multiple times
  // specifying a different API index for each.  A concrete example - Java supports 3 APIs: blocking, async and reactive.
  int32 apiCount = 4;

  // It's crucial we always compare apples-to-apples in the tests, e.g. if anything changes on the performer side that
  // means we can't compare results from it against previous results.
  // Bump this whenever that happens.  (Will also need to force a rerun of tests for this language, since jenkins-sdk
  // won't know it's occurred).
  // todo move to jenkins-sdk
  int32 performerVersion = 5;
}

message ClusterConfig {
  // Used for TLS enabled clusters such as Capella clusters
  bool useTls = 3;
  optional string certPath = 4;
  // When we start SDK integration testing, will fill this out.
}

// Creates a cluster connection, with an optional cluster & transactions configuration.
message ClusterConnectionCreateRequest {
  // The id to use for this connection.
  string clusterConnectionId = 1;

  // Details of the cluster connection.
  string clusterHostname = 2;
  string clusterUsername = 3;
  string clusterPassword = 4;

  optional ClusterConfig clusterConfig = 5;
}

message ClusterConnectionCreateResponse {
}

message ClusterConnectionCloseRequest {
  string clusterConnectionId = 1;
}

message ClusterConnectionCloseResponse {
}

message EchoRequest {
  string message = 1;
  string testName = 2;
}

message EchoResponse {
}

// We may need the flexibility to do various forms of counter, e.g.:
// 1. Aim to do 1m operations across all threads.
// 2. Each thread does 1m operations.
// (1) is the simplest and most useful, so is the only one supported for now.  And `counterId` lets us do (2) with it anyway.
message CounterGlobal {
  // The performer should initialise the counter at this value, and will generally keep going until the counter reaches 0
  int32 count = 1;
}

message Counter {
  // Each counter gets a unique id (unique to the PerfRunRequest, not globally unique).  The performer will create these on-demand.
  // Each counter is bound to a PerfRunRequest.
  // E.g. concurrent PerfRunRequests both referencing "counter1" should have separate isolated counters.
  string counterId = 1;

  oneof counter {
    CounterGlobal global = 2;
  }
}

// Controls how a given workload is bounded.
// A simple bounding would be to just run X operations as fast as possible, and then stop.
// In future we will support more advanced bounds, such as the performer maintaining a target throughput of 100 ops/sec and
// seeing what the latency is, for 60 seconds.
message Bounds {
  oneof bounds {
    Counter counter = 1;
  }
}
